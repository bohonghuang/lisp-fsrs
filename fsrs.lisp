(in-package #:lisp-fsrs)

(defstruct (fsrs (:constructor %make-fsrs))
  (parameters (make-parameters) :type parameters))

(defun make-fsrs (&rest
                    args
                  &key
                    (parameters
                     (progn
                       (remf args :parameters)
                       (apply #'make-parameters args)))
                  &allow-other-keys)
  (%make-fsrs :parameters parameters))

(declaim (ftype (function (fsrs) (values (simple-array single-float (19)))) fsrs-pw)
         (inline fsrs-pw))
(defun fsrs-pw (self)
  (parameters-weights (fsrs-parameters self)))

(declaim (ftype (function (fsrs rating) (values non-negative-single-float)) fsrs-init-stability))
(defun fsrs-init-stability (self rating &aux (w (fsrs-pw self)) (r (rating-index rating)))
  (max (aref w (1- r)) 0.1))

(declaim (ftype (function (fsrs rating) (values non-negative-single-float)) fsrs-init-difficulty))
(defun fsrs-init-difficulty (self rating &aux (w (fsrs-pw self)) (r (rating-index rating)))
  (min (max (1+ (- (aref w 4) (exp (* (aref w 5) (1- r))))) 1.0) 10.0))

(declaim (ftype (function (fsrs non-negative-fixnum non-negative-single-float) (values (single-float 0.0 1.0))) fsrs-forgetting-curve))
(defun fsrs-forgetting-curve (self elapsed-days stability)
  (declare (ignore self))
  (expt (1+ (/ (* +factor+ elapsed-days) stability)) +decay+))

(defconstant most-negative-fixnum-float (coerce most-negative-fixnum 'single-float))
(defconstant most-positive-fixnum-float (coerce most-positive-fixnum 'single-float))
(deftype fixnum-float () (list 'single-float most-negative-fixnum-float most-positive-fixnum-float))

(declaim (ftype (function (fsrs non-negative-single-float) (values non-negative-fixnum)) fsrs-next-interval))
(defun fsrs-next-interval (self s &aux (p (fsrs-parameters self)))
  (let ((new-interval (* (/ s +factor+) (1- (expt (parameters-request-retention p) (/ +decay+))))))
    (declare (type fixnum-float new-interval))
    (min (max (nth-value 0 (round new-interval)) 1) (parameters-maximum-interval p))))

(declaim (ftype (function (fsrs non-negative-single-float rating) (values non-negative-single-float)) fsrs-short-term-stability))
(defun fsrs-short-term-stability (self stability rating &aux (w (fsrs-pw self)) (r (rating-index rating)))
  (* stability (exp (* (aref w 17) (+ (- r 3) (aref w 18))))))

(declaim (ftype (function (fsrs non-negative-single-float single-float) (values single-float)) fsrs-mean-reversion))
(defun fsrs-mean-reversion (self init current &aux (w (fsrs-pw self)))
  (+ (* (aref w 7) init) (* (- 1.0 (aref w 7)) current)))

(declaim (ftype (function (fsrs non-negative-single-float rating) (values non-negative-single-float)) fsrs-next-difficulty))
(defun fsrs-next-difficulty (self d rating &aux (w (fsrs-pw self)) (r (rating-index rating)))
  (let ((next-d (- d (* (aref w 6) (- r 3)))))
    (min (max (fsrs-mean-reversion self (fsrs-init-difficulty self :easy) next-d) 1.0) 10.0)))

(declaim (ftype (function (fsrs non-negative-single-float non-negative-single-float (single-float 0.0 1.0) rating) (values non-negative-single-float)) fsrs-next-recall-stability))
(defun fsrs-next-recall-stability (self d s r rating &aux (w (fsrs-pw self)))
  (let ((hard-penalty (if (eq rating :hard) (aref w 15) 1.0))
        (easy-bonus (if (eq rating :easy) (aref w 16) 1.0)))
    (* s (1+ (* (exp (aref w 8))
                (- 11.0 d)
                (expt s (- (aref w 9)))
                (1- (exp (* (- 1.0 r) (aref w 10))))
                hard-penalty
                easy-bonus)))))

(declaim (ftype (function (fsrs non-negative-single-float non-negative-single-float (single-float 0.0 1.0)) (values non-negative-single-float)) fsrs-next-forget-stability))
(defun fsrs-next-forget-stability (self d s r &aux (w (fsrs-pw self)))
  (* (aref w 11)
     (expt d (- (aref w 12)))
     (1- (expt (1+ s) (aref w 13)))
     (exp (* (- 1 r) (aref w 14)))))

(declaim (ftype (function (fsrs scheduling-cards)) fsrs-init-ds))
(defun fsrs-init-ds (self s)
  (let ((again (scheduling-cards-again s))
        (hard (scheduling-cards-hard s))
        (good (scheduling-cards-good s))
        (easy (scheduling-cards-easy s)))
    (setf (card-difficulty again) (fsrs-init-difficulty self :again)
          (card-stability again) (fsrs-init-stability self :again)
          (card-difficulty hard) (fsrs-init-difficulty self :hard)
          (card-stability hard) (fsrs-init-stability self :hard)
          (card-difficulty good) (fsrs-init-difficulty self :good)
          (card-stability good) (fsrs-init-stability self :good)
          (card-difficulty easy) (fsrs-init-difficulty self :easy)
          (card-stability easy) (fsrs-init-stability self :easy))))

(declaim (ftype (function (fsrs scheduling-cards non-negative-single-float non-negative-single-float (single-float 0.0 1.0) state)) fsrs-next-ds))
(defun fsrs-next-ds (self s last-d last-s retrievability state)
  (let ((again (scheduling-cards-again s))
        (hard (scheduling-cards-hard s))
        (good (scheduling-cards-good s))
        (easy (scheduling-cards-easy s)))
    (setf (card-difficulty again) (fsrs-next-difficulty self last-d :again)
          (card-difficulty hard) (fsrs-next-difficulty self last-d :hard)
          (card-difficulty good) (fsrs-next-difficulty self last-d :good)
          (card-difficulty easy) (fsrs-next-difficulty self last-d :easy))
    (ecase state
      ((:learning :relearning)
       (setf (card-stability again) (fsrs-short-term-stability self last-s :again)
             (card-stability hard) (fsrs-short-term-stability self last-s :hard)
             (card-stability good) (fsrs-short-term-stability self last-s :good)
             (card-stability easy) (fsrs-short-term-stability self last-s :easy)))
      (:review
       (setf (card-stability again) (fsrs-next-forget-stability self last-d last-s retrievability)
             (card-stability hard) (fsrs-next-recall-stability self last-d last-s retrievability :hard)
             (card-stability good) (fsrs-next-recall-stability self last-d last-s retrievability :good)
             (card-stability easy) (fsrs-next-recall-stability self last-d last-s retrievability :easy))))))

(declaim (ftype (function (fsrs card &optional timestamp) (values list)) fsrs-repeat))
(defun fsrs-repeat (self card &optional (now (now)))
  (let ((card (copy-card card)))
    (setf (card-elapsed-days card) (if (eq (card-state card) :new) 0 (seconds-days (timestamp-difference now (card-last-review card))))
          (card-last-review card) now)
    (incf (card-repeats card))
    (let ((s (make-scheduling-cards :card card)))
      (scheduling-cards-update-state s (card-state card))
      (let ((again (scheduling-cards-again s))
            (hard (scheduling-cards-hard s))
            (good (scheduling-cards-good s))
            (easy (scheduling-cards-easy s)))
        (ecase (card-state card)
          (:new
           (fsrs-init-ds self s)
           (setf (card-due again) (timestamp+ now 1 :minute)
                 (card-due hard) (timestamp+ now 5 :minute)
                 (card-due good) (timestamp+ now 10 :minute))
           (let ((easy-interval (fsrs-next-interval self (card-stability easy))))
             (setf (card-scheduled-days easy) easy-interval
                   (card-due easy) (timestamp+ now easy-interval :day))))
          ((:learning :relearning)
           (let* ((interval (card-elapsed-days card))
                  (last-d (card-difficulty card))
                  (last-s (card-stability card))
                  (retrievability (fsrs-forgetting-curve self interval last-s)))
             (fsrs-next-ds self s last-d last-s retrievability (card-state card))
             (let* ((hard-interval 0)
                    (good-interval (fsrs-next-interval self (card-stability good)))
                    (easy-interval (max (fsrs-next-interval self (card-stability easy)) (1+ good-interval))))
               (scheduling-cards-schedule s now hard-interval good-interval easy-interval))))
          (:review
           (let* ((interval (card-elapsed-days card))
                  (last-d (card-difficulty card))
                  (last-s (card-stability card))
                  (retrievability (fsrs-forgetting-curve self interval last-s)))
             (fsrs-next-ds self s last-d last-s retrievability (card-state card))
             (let* ((hard-interval (fsrs-next-interval self (card-stability hard)))
                    (good-interval (fsrs-next-interval self (card-stability good)))
                    (hard-interval (min hard-interval good-interval))
                    (good-interval (max good-interval (1+ hard-interval)))
                    (easy-interval (max (fsrs-next-interval self (card-stability easy)) (1+ good-interval))))
               (scheduling-cards-schedule s now hard-interval good-interval easy-interval))))))
      (scheduling-cards-record-log s card now))))

(declaim (ftype (function (fsrs card rating &optional timestamp) (values card review-log)) fsrs-review-card))
(defun fsrs-review-card (self card rating &optional (now (now)))
  (let* ((scheduling-cards (fsrs-repeat self card now))
         (scheduling-info (getf scheduling-cards rating))
         (card (scheduling-info-card scheduling-info))
         (review-log (scheduling-info-review-log scheduling-info)))
    (values card review-log)))
